package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"
)

// Structs to map API responses
type EventAPIResponse struct {
	CardNumber      string `json:"cardNumber"`
	PostedTimestamp string `json:"postedTimestamp"`
}

type ProfileAPIResponse struct {
	EffectiveTimestamp string `json:"effectiveTimestamp"`
}

// Helper function to make HTTP GET requests
func makeRequest(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("error: received non-OK response: %v", resp.Status)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// Function to fetch event data from EventAPI
func getEventData(eventID string) (*EventAPIResponse, error) {
	url := fmt.Sprintf("https://api.example.com/event/%s", eventID) // Replace with actual EventAPI URL
	body, err := makeRequest(url)
	if err != nil {
		return nil, err
	}

	var eventData EventAPIResponse
	if err := json.Unmarshal(body, &eventData); err != nil {
		return nil, err
	}

	return &eventData, nil
}

// Function to fetch profile data from ProfileAPI
func getProfileData(cardNumber string) (*ProfileAPIResponse, error) {
	url := fmt.Sprintf("https://api.example.com/profile/%s", cardNumber) // Replace with actual ProfileAPI URL
	body, err := makeRequest(url)
	if err != nil {
		return nil, err
	}

	var profileData ProfileAPIResponse
	if err := json.Unmarshal(body, &profileData); err != nil {
		return nil, err
	}

	return &profileData, nil
}

// Function to compare timestamps and write result to file
func compareTimestamps(eventID string) error {
	// Get event data from EventAPI
	eventData, err := getEventData(eventID)
	if err != nil {
		return err
	}

	// Get profile data from ProfileAPI using card number from EventAPI response
	profileData, err := getProfileData(eventData.CardNumber)
	if err != nil {
		return err
	}

	// Parse timestamps
	postedTimestamp, err := time.Parse(time.RFC3339, eventData.PostedTimestamp)
	if err != nil {
		return fmt.Errorf("failed to parse posted timestamp: %v", err)
	}

	effectiveTimestamp, err := time.Parse(time.RFC3339, profileData.EffectiveTimestamp)
	if err != nil {
		return fmt.Errorf("failed to parse effective timestamp: %v", err)
	}

	// Compare timestamps
	comparisonResult := "Timestamps are equal"
	if !postedTimestamp.Equal(effectiveTimestamp) {
		comparisonResult = fmt.Sprintf("Timestamps are different: Posted = %v, Effective = %v", postedTimestamp, effectiveTimestamp)
	}

	// Write result to file
	result := fmt.Sprintf("Event ID: %s\n%s\n", eventID, comparisonResult)
	err = ioutil.WriteFile("comparison_result.txt", []byte(result), 0644)
	if err != nil {
		return fmt.Errorf("failed to write result to file: %v", err)
	}

	return nil
}

func main() {
	eventID := "12345" // Example event ID
	err := compareTimestamps(eventID)
	if err != nil {
		log.Fatalf("Error: %v", err)
	}
	fmt.Println("Comparison completed and result written to comparison_result.txt")
}
