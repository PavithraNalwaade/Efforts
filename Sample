	// Open the result file (create it if it doesn't exist)
	resultFile, err := os.Create("result.txt")
	if err != nil {
		fmt.Println("Error creating file:", err)
		return
	}
	defer resultFile.Close()

	// Map to keep track of unique entries
	uniqueEntries := make(map[string]bool)

	// Result string to hold all unique log messages
	var result string

	// Process each log message
	for _, logMessage := range logMessages {
		// Only add unique log messages to the result
		if _, exists := uniqueEntries[logMessage]; !exists {
			uniqueEntries[logMessage] = true
			result += logMessage + "\n"
		}
	}

	// Write the accumulated result to the file
	_, err = resultFile.WriteString(result)
	if err != nil {
		fmt.Println("Error writing to file:", err)
		return
	}




____________________



if _, exists := uniqueEntries[logMessage]; !exists {
			uniqueEntries[logMessage] = true
			result += logMessage + "\n"
		}


_____________________





func compareTimestamps(eventID string, eventData EventAPIResponse, profileData ProfileAPIResponse) string {
	// Append 'Z' if it's missing from the postedTimestamp
	if !strings.Contains(eventData.Snapshot.Payload.Data.PostedTimestamp, "Z") {
		eventData.Snapshot.Payload.Data.PostedTimestamp = eventData.Snapshot.Payload.Data.PostedTimestamp + "Z"
	}

	// Parse the postedTimestamp (ensure it's in RFC3339 format)
	postedTimestamp, err := time.Parse(time.RFC3339, eventData.Snapshot.Payload.Data.PostedTimestamp)
	if err != nil {
		log.Printf("Failed to parse posted timestamp: %v", err)
		return ""
	}

	// Initialize result string to collect all comparisons
	var result string

	// Iterate over all ProductInfo entries and compare EffectiveDate
	for i := 0; i < len(profileData.ProductInfo); i++ {
		// Parse the effectiveTimestamp for each ProductInfo entry
		effectiveTimestamp, err := time.Parse(time.RFC3339, profileData.ProductInfo[i].EffectiveDate)
		if err != nil {
			log.Printf("Failed to parse effectiveDate for ProductInfo[%d]: %v", i, err)
			continue
		}

		// Calculate the time difference
		diff := postedTimestamp.Sub(effectiveTimestamp).Abs()

		// Compare the timestamps and append result
		if diff < time.Hour*24 { // 24 hours difference
			result += fmt.Sprintf("%s,%s,%s,%s,%s\n", eventID, eventData.Snapshot.Payload.Data.PostedTimestamp, profileData.ProductInfo[i].EffectiveDate, "Timestamps are near, but not identical.")
		} else if postedTimestamp.Equal(effectiveTimestamp) {
			result += fmt.Sprintf("%s,%s,%s,%s,%s\n", eventID, eventData.Snapshot.Payload.Data.PostedTimestamp, profileData.ProductInfo[i].EffectiveDate, "Timestamps are identical.")
		} else {
			result += fmt.Sprintf("%s,%s,%s,%s,%s\n", eventID, eventData.Snapshot.Payload.Data.PostedTimestamp, profileData.ProductInfo[i].EffectiveDate, "Timestamps are not identical")
		}
	}

	// Return the final result
	return result
}


















++++++++++++++


// Check if the timestamp already has a time zone (Z or offset)
	if !strings.Contains(eventData.PostedTimestamp, "Z") && !strings.Contains(eventData.PostedTimestamp, "+") && !strings.Contains(eventData.PostedTimestamp, "-") {
		// If no time zone is present, append 'Z' to indicate UTC
		eventData.PostedTimestamp = eventData.PostedTimestamp + "Z"
	}


+++++++++++++

// cG5hbHdhYTozQXRpc2hAY2hhdmFuMTc= //

package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
	"bufio"
)

// Structs to map API responses
type EventAPIResponse struct {
	CardNumber      string `json:"cardNumber"`
	PostedTimestamp string `json:"postedTimestamp"`
}

type ProfileAPIResponse struct {
	EffectiveTimestamp string `json:"effectiveTimestamp"`
}

// Helper function to make HTTP GET requests
func makeRequest(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("received non-OK response: %v", resp.Status)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// Fetch event data from EventAPI
func getEventData(eventID string) (*EventAPIResponse, error) {
	url := fmt.Sprintf("https://api.example.com/event/%s", eventID) // Replace with actual EventAPI URL
	body, err := makeRequest(url)
	if err != nil {
		return nil, err
	}

	var eventData EventAPIResponse
	if err := json.Unmarshal(body, &eventData); err != nil {
		return nil, err
	}

	return &eventData, nil
}

// Fetch profile data from ProfileAPI
func getProfileData(cardNumber string) (*ProfileAPIResponse, error) {
	url := fmt.Sprintf("https://api.example.com/profile/%s", cardNumber) // Replace with actual ProfileAPI URL
	body, err := makeRequest(url)
	if err != nil {
		return nil, err
	}

	var profileData ProfileAPIResponse
	if err := json.Unmarshal(body, &profileData); err != nil {
		return nil, err
	}

	return &profileData, nil
}

// Compare timestamps and write results to a file
func compareTimestamps(eventID string, eventData EventAPIResponse, profileData ProfileAPIResponse) string {
	// Parse the timestamps
	postedTimestamp, err := time.Parse(time.RFC3339, eventData.PostedTimestamp)
	if err != nil {
		log.Printf("Failed to parse posted timestamp for Event ID %s: %v", eventID, err)
		return ""
	}

	effectiveTimestamp, err := time.Parse(time.RFC3339, profileData.EffectiveTimestamp)
	if err != nil {
		log.Printf("Failed to parse effective timestamp for Card Number %s: %v", eventData.CardNumber, err)
		return ""
	}

	// Compare timestamps (allow for a small window, e.g., 5 seconds)
	diff := postedTimestamp.Sub(effectiveTimestamp).Abs()
	if diff < time.Second*5 { // Threshold for near match (5 seconds here)
		return fmt.Sprintf("%s,%s,%s,%s,%s\n", eventID, eventData.PostedTimestamp, profileData.EffectiveTimestamp, "Near Match", "Timestamps are near but not identical")
	} else if postedTimestamp.Equal(effectiveTimestamp) {
		return fmt.Sprintf("%s,%s,%s,%s,%s\n", eventID, eventData.PostedTimestamp, profileData.EffectiveTimestamp, "Exact Match", "Timestamps are identical")
	}
	return ""
}

// Read event IDs from a file
func readEventIDsFromFile(filename string) ([]string, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, fmt.Errorf("failed to open file: %v", err)
	}
	defer file.Close()

	var eventIDs []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		eventID := strings.TrimSpace(scanner.Text())
		if eventID != "" {
			eventIDs = append(eventIDs, eventID)
		}
	}

	if err := scanner.Err(); err != nil {
		return nil, fmt.Errorf("error reading file: %v", err)
	}

	return eventIDs, nil
}

func main() {
	// Read event IDs from file
	eventIDs, err := readEventIDsFromFile("event_ids.txt")
	if err != nil {
		log.Fatalf("Error reading event IDs: %v", err)
	}

	// Create and open the result file to store matching or near matching events
	resultFile, err := os.Create("comparison_result.csv")
	if err != nil {
		log.Fatalf("Error creating result file: %v", err)
	}
	defer resultFile.Close()

	// Write headers to the comparison result file
	_, err = resultFile.WriteString("EventID,PostedTimestamp,EffectiveTimestamp,MatchType,Comment\n")
	if err != nil {
		log.Fatalf("Error writing to result file: %v", err)
	}

	// Process each event ID
	for _, eventID := range eventIDs {
		// Fetch Event Data from EventAPI
		eventData, err := getEventData(eventID)
		if err != nil {
			log.Printf("Error fetching data for Event ID %s: %v", eventID, err)
			continue
		}

		// Fetch Profile Data from ProfileAPI using CardNumber from EventAPI response
		profileData, err := getProfileData(eventData.CardNumber)
		if err != nil {
			log.Printf("Error fetching profile data for CardNumber %s: %v", eventData.CardNumber, err)
			continue
		}

		// Compare timestamps and write the result if they match or are near
		result := compareTimestamps(eventID, *eventData, *profileData)
		if result != "" {
			// Write the result to the comparison result file
			_, err = resultFile.WriteString(result)
			if err != nil {
				log.Printf("Error writing comparison result for Event ID %s: %v", eventID, err)
			}
		}
	}

	fmt.Println("Comparison completed and results written to comparison_result.csv")
}






-------------




// Fetch profile data from ProfileAPI with Basic Authorization Header
func getProfileData(cardNumber string) (*ProfileAPIResponse, error) {
    // URL for fetching profile data using card number
    url := fmt.Sprintf("https://api.example.com/profile/%s", cardNumber) // Replace with actual ProfileAPI URL

    // Hardcoded Basic Authorization token (replace with actual Base64-encoded token)
    basicAuthToken := "dXNlcjpwYXNz" // Example of a base64-encoded "user:pass" token

    // Prepare headers with the Basic token
    headers := map[string]string{
        "Authorization": "Basic " + basicAuthToken, // Hardcoded Authorization header with Basic token
    }

    // Make the request with the Authorization header
    body, err := makeRequestWithHeaders(url, headers)
    if err != nil {
        return nil, err
    }

    // Optionally, print the response for debugging
    fmt.Println("API Response Body:", string(body))

    // Unmarshal the response into the ProfileAPIResponse struct
    var profileData ProfileAPIResponse
    if err := json.Unmarshal(body, &profileData); err != nil {
        return nil, err
    }

    // Return the parsed profile data
    return &profileData, nil
}

// Modified helper function to handle custom headers
func makeRequestWithHeaders(url string, headers map[string]string) ([]byte, error) {
    req, err := http.NewRequest("GET", url, nil)
    if err != nil {
        return nil, err
    }

    // Add headers to the request (including authorization)
    for key, value := range headers {
        req.Header.Add(key, value)
    }

    // Create HTTP client with timeout
    client := &http.Client{
        Timeout: time.Second * 10,
    }

    resp, err := client.Do(req)
    if err != nil {
        return nil, err
    }
    defer resp.Body.Close()

    if resp.StatusCode != http.StatusOK {
        return nil, fmt.Errorf("received non-OK response: %v", resp.Status)
    }

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }

    return body, nil
}

